"""
This type stub file was generated by pyright.
"""

from socketserver import StreamRequestHandler, TCPServer, ThreadingMixIn
from typing import Any, Callable, Literal, Tuple, TypedDict, Union

class T_WebsocketClient(TypedDict):
    id : int
    handler : WebSocketHandler
    address : Tuple[str, int]

logger = ...
FIN = ...
OPCODE = ...
MASKED = ...
PAYLOAD_LEN = ...
PAYLOAD_LEN_EXT16 = ...
PAYLOAD_LEN_EXT64 = ...
OPCODE_CONTINUATION = ...
OPCODE_TEXT = ...
OPCODE_BINARY = ...
OPCODE_CLOSE_CONN = ...
OPCODE_PING = ...
OPCODE_PONG = ...
CLOSE_STATUS_NORMAL = ...
DEFAULT_CLOSE_REASON = ...
class API:
    def run_forever(self, threaded : bool=...) -> None: ...
    
    def new_client(self, client, server): # -> None:
        ...
    
    def client_left(self, client, server): # -> None:
        ...
    
    def message_received(self, client, server, message): # -> None:
        ...
    
    def set_fn_new_client(self, fn : Callable[ [T_WebsocketClient, WebsocketServer], None ] ) -> None:
        ...
    
    def set_fn_client_left(self, fn : Callable[ [T_WebsocketClient, WebsocketServer], None ] ) -> None:
        ...
    
    def set_fn_message_received(self, fn : Callable[ [T_WebsocketClient, WebsocketServer, str], None ]) -> None: ...
    
    def send_message(self, client : T_WebsocketClient, msg : Union[str, bytes]) -> None:
        ...
    
    def send_message_to_all(self, msg): # -> None:
        ...
    
    def deny_new_connections(self, status : int =..., reason : bytes=...) -> None: ...
    def allow_new_connections(self) -> None: ...
    
    def shutdown_gracefully(self, status: int =..., reason : bytes =...) -> None:
        ...
    
    def shutdown_abruptly(self) -> None:
        ...
    
    def disconnect_clients_gracefully(self, status=..., reason=...): # -> None:
        ...
    
    def disconnect_clients_abruptly(self): # -> None:
        ...
    


class WebsocketServer(ThreadingMixIn, TCPServer, API):
    """
	A websocket server waiting for"""
    allow_reuse_address = ...
    daemon_threads = ...
    def __init__(self, host=..., port=..., loglevel=..., key=..., cert=...) -> None:
        ...
    
    def handler_to_client(self, handler): # -> None:
        ...
    


class WebSocketHandler(StreamRequestHandler):
    def __init__(self, socket, addr, server) -> None:
        ...
    
    def setup(self): # -> None:
        ...
    
    def handle(self): # -> None:
        ...
    
    def read_bytes(self, num): # -> bytes:
        ...
    
    def read_next_message(self): # -> None:
        ...
    
    def send_message(self, message : Union[str, bytes]) -> None: ...    
    def send_pong(self, message): # -> None:
        ...
    
    def send_close(self, status=..., reason=...): # -> None:
        """
        Send CLOSE to client

 """
        ...
    
    def send_text(self, message : Union[str, bytes], opcode : int =...) -> Literal[False] | None:
        """
        Important: Fragmented(="""
        ...
    
    def read_http_headers(self): # -> dict[Unknown, Unknown]:
        ...
    
    def handshake(self): # -> None:
        ...
    
    @classmethod
    def make_handshake_response(cls, key): # -> str:
        ...
    
    @classmethod
    def calculate_response_key(cls, key): # -> str:
        ...
    
    def finish(self): # -> None:
        ...
    


def encode_to_UTF8(data): # -> Literal[False]:
    ...

def try_decode_UTF8(data): # -> Literal[False]:
    ...

