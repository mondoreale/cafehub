"""
This type stub file was generated by pyright.
"""

import uuid
from typing import Callable, Union
from bleak.backends.client import BaseBleakClient
from bleak.backends.device import BLEDevice
from bleak.backends.service import BleakGATTServiceCollection
from bleak.backends.characteristic import BleakGATTCharacteristic

"""
BLE Client for CoreBluetooth on"""
logger = ...
class BleakClientCoreBluetooth(BaseBleakClient):
    """CoreBluetooth class interface fo"""
    def __init__(self, address_or_ble_device: Union[BLEDevice, str], **kwargs) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    async def connect(self, **kwargs) -> bool:
        """Connect to a specified Periphera"""
        ...
    
    async def disconnect(self) -> bool:
        """Disconnect from the peripheral d"""
        ...
    
    @property
    def is_connected(self) -> bool:
        """Checks for current active connec"""
        ...
    
    @property
    def mtu_size(self) -> int:
        """Get ATT MTU size for active conn"""
        ...
    
    async def pair(self, *args, **kwargs) -> bool:
        """Attempt to pair with a periphera"""
        ...
    
    async def unpair(self) -> bool:
        """

        Returns:

        """
        ...
    
    async def get_services(self, **kwargs) -> BleakGATTServiceCollection:
        """Get all services registered for """
        ...
    
    async def read_gatt_char(self, char_specifier: Union[BleakGATTCharacteristic, int, str, uuid.UUID], use_cached=..., **kwargs) -> bytearray:
        """Perform read operation on the sp"""
        ...
    
    async def read_gatt_descriptor(self, handle: int, use_cached=..., **kwargs) -> bytearray:
        """Perform read operation on the sp"""
        ...
    
    async def write_gatt_char(self, char_specifier: Union[BleakGATTCharacteristic, int, str, uuid.UUID], data: Union[bytes, bytearray, memoryview], response: bool = ...) -> None:
        """Perform a write operation of the"""
        ...
    
    async def write_gatt_descriptor(self, handle: int, data: Union[bytes, bytearray, memoryview]) -> None:
        """Perform a write operation on the"""
        ...
    
    async def start_notify(self, char_specifier: Union[BleakGATTCharacteristic, int, str, uuid.UUID], callback: Callable[[int, bytearray], None], **kwargs) -> None:
        """Activate notifications/indicatio"""
        ...
    
    async def stop_notify(self, char_specifier: Union[BleakGATTCharacteristic, int, str, uuid.UUID]) -> None:
        """Deactivate notification/indicati"""
        ...
    
    async def get_rssi(self) -> int:
        """To get RSSI value in dBm of the """
        ...
    


