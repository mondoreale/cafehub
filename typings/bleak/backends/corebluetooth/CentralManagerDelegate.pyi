"""
This type stub file was generated by pyright.
"""

import objc
from typing import Any, Callable, Optional
from CoreBluetooth import CBCentralManager, CBPeripheral
from Foundation import NSDictionary, NSError, NSNumber, NSObject, NSString

"""
CentralManagerDelegate will imp"""
logger = ...
CBCentralManagerDelegate = ...
DisconnectCallback = Callable[[], None]
class CentralManagerDelegate(NSObject):
    """macOS conforming python class fo"""
    ___pyobjc_protocols__ = ...
    def init(self) -> Optional[CentralManagerDelegate]:
        """macOS init function for NSObject"""
        ...
    
    def __del__(self): # -> None:
        ...
    
    @objc.python_method
    async def start_scan(self, service_uuids) -> None:
        ...
    
    @objc.python_method
    async def stop_scan(self) -> None:
        ...
    
    @objc.python_method
    async def connect(self, peripheral: CBPeripheral, disconnect_callback: DisconnectCallback, timeout=...) -> None:
        ...
    
    @objc.python_method
    async def disconnect(self, peripheral: CBPeripheral) -> None:
        ...
    
    def observeValueForKeyPath_ofObject_change_context_(self, keyPath: NSString, object: Any, change: NSDictionary, context: int) -> None:
        ...
    
    def centralManagerDidUpdateState_(self, centralManager: CBCentralManager) -> None:
        ...
    
    @objc.python_method
    def did_discover_peripheral(self, central: CBCentralManager, peripheral: CBPeripheral, advertisementData: NSDictionary, RSSI: NSNumber) -> None:
        ...
    
    def centralManager_didDiscoverPeripheral_advertisementData_RSSI_(self, central: CBCentralManager, peripheral: CBPeripheral, advertisementData: NSDictionary, RSSI: NSNumber) -> None:
        ...
    
    @objc.python_method
    def did_connect_peripheral(self, central: CBCentralManager, peripheral: CBPeripheral) -> None:
        ...
    
    def centralManager_didConnectPeripheral_(self, central: CBCentralManager, peripheral: CBPeripheral) -> None:
        ...
    
    @objc.python_method
    def did_fail_to_connect_peripheral(self, centralManager: CBCentralManager, peripheral: CBPeripheral, error: Optional[NSError]) -> None:
        ...
    
    def centralManager_didFailToConnectPeripheral_error_(self, centralManager: CBCentralManager, peripheral: CBPeripheral, error: Optional[NSError]) -> None:
        ...
    
    @objc.python_method
    def did_disconnect_peripheral(self, central: CBCentralManager, peripheral: CBPeripheral, error: Optional[NSError]) -> None:
        ...
    
    def centralManager_didDisconnectPeripheral_error_(self, central: CBCentralManager, peripheral: CBPeripheral, error: Optional[NSError]) -> None:
        ...
    


