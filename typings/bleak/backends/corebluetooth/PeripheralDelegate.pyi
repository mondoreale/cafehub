"""
This type stub file was generated by pyright.
"""

import asyncio
import objc
from typing import Any, Callable, Iterable, Optional
from Foundation import NSArray, NSData, NSError, NSNumber, NSObject, NSString
from CoreBluetooth import CBCharacteristic, CBDescriptor, CBPeripheral, CBService

"""

PeripheralDelegate

Created by"""
logger = ...
CBPeripheralDelegate = ...
CBCharacteristicWriteType = ...
class PeripheralDelegate(NSObject):
    """macOS conforming python class fo"""
    ___pyobjc_protocols__ = ...
    def initWithPeripheral_(self, peripheral: CBPeripheral): # -> None:
        """macOS init function for NSObject"""
        ...
    
    @objc.python_method
    def futures(self) -> Iterable[asyncio.Future]:
        """
        Gets all futures for th"""
        ...
    
    @objc.python_method
    async def discover_services(self) -> NSArray:
        ...
    
    @objc.python_method
    async def discover_characteristics(self, service: CBService) -> NSArray:
        ...
    
    @objc.python_method
    async def discover_descriptors(self, characteristic: CBCharacteristic) -> NSArray:
        ...
    
    @objc.python_method
    async def read_characteristic(self, characteristic: CBCharacteristic, use_cached: bool = ...) -> NSData:
        ...
    
    @objc.python_method
    async def read_descriptor(self, descriptor: CBDescriptor, use_cached: bool = ...) -> Any:
        ...
    
    @objc.python_method
    async def write_characteristic(self, characteristic: CBCharacteristic, value: NSData, response: CBCharacteristicWriteType) -> None:
        ...
    
    @objc.python_method
    async def write_descriptor(self, descriptor: CBDescriptor, value: NSData) -> None:
        ...
    
    @objc.python_method
    async def start_notifications(self, characteristic: CBCharacteristic, callback: Callable[[str, Any], Any]) -> None:
        ...
    
    @objc.python_method
    async def stop_notifications(self, characteristic: CBCharacteristic) -> None:
        ...
    
    @objc.python_method
    async def read_rssi(self) -> NSNumber:
        ...
    
    @objc.python_method
    def did_discover_services(self, peripheral: CBPeripheral, services: NSArray, error: Optional[NSError]) -> None:
        ...
    
    def peripheral_didDiscoverServices_(self, peripheral: CBPeripheral, error: Optional[NSError]) -> None:
        ...
    
    @objc.python_method
    def did_discover_characteristics_for_service(self, peripheral: CBPeripheral, service: CBService, characteristics: NSArray, error: Optional[NSError]): # -> None:
        ...
    
    def peripheral_didDiscoverCharacteristicsForService_error_(self, peripheral: CBPeripheral, service: CBService, error: Optional[NSError]): # -> None:
        ...
    
    @objc.python_method
    def did_discover_descriptors_for_characteristic(self, peripheral: CBPeripheral, characteristic: CBCharacteristic, error: Optional[NSError]): # -> None:
        ...
    
    def peripheral_didDiscoverDescriptorsForCharacteristic_error_(self, peripheral: CBPeripheral, characteristic: CBCharacteristic, error: Optional[NSError]): # -> None:
        ...
    
    @objc.python_method
    def did_update_value_for_characteristic(self, peripheral: CBPeripheral, characteristic: CBCharacteristic, value: NSData, error: Optional[NSError]): # -> None:
        ...
    
    def peripheral_didUpdateValueForCharacteristic_error_(self, peripheral: CBPeripheral, characteristic: CBCharacteristic, error: Optional[NSError]): # -> None:
        ...
    
    @objc.python_method
    def did_update_value_for_descriptor(self, peripheral: CBPeripheral, descriptor: CBDescriptor, value: NSObject, error: Optional[NSError]): # -> None:
        ...
    
    def peripheral_didUpdateValueForDescriptor_error_(self, peripheral: CBPeripheral, descriptor: CBDescriptor, error: Optional[NSError]): # -> None:
        ...
    
    @objc.python_method
    def did_write_value_for_characteristic(self, peripheral: CBPeripheral, characteristic: CBCharacteristic, error: Optional[NSError]): # -> None:
        ...
    
    def peripheral_didWriteValueForCharacteristic_error_(self, peripheral: CBPeripheral, characteristic: CBCharacteristic, error: Optional[NSError]): # -> None:
        ...
    
    @objc.python_method
    def did_write_value_for_descriptor(self, peripheral: CBPeripheral, descriptor: CBDescriptor, error: Optional[NSError]): # -> None:
        ...
    
    def peripheral_didWriteValueForDescriptor_error_(self, peripheral: CBPeripheral, descriptor: CBDescriptor, error: Optional[NSError]): # -> None:
        ...
    
    @objc.python_method
    def did_update_notification_for_characteristic(self, peripheral: CBPeripheral, characteristic: CBCharacteristic, error: Optional[NSError]): # -> None:
        ...
    
    def peripheral_didUpdateNotificationStateForCharacteristic_error_(self, peripheral: CBPeripheral, characteristic: CBCharacteristic, error: Optional[NSError]): # -> None:
        ...
    
    @objc.python_method
    def did_read_rssi(self, peripheral: CBPeripheral, rssi: NSNumber, error: Optional[NSError]) -> None:
        ...
    
    @objc.python_method
    def did_update_name(self, peripheral: CBPeripheral, name: NSString) -> None:
        ...
    
    def peripheralDidUpdateName_(self, peripheral: CBPeripheral) -> None:
        ...
    
    @objc.python_method
    def did_modify_services(self, peripheral: CBPeripheral, invalidated_services: NSArray) -> None:
        ...
    
    def peripheral_didModifyServices_(self, peripheral: CBPeripheral, invalidatedServices: NSArray) -> None:
        ...
    


if objc.macos_available(10, 13):
    def peripheral_didReadRSSI_error_(self: PeripheralDelegate, peripheral: CBPeripheral, rssi: NSNumber, error: Optional[NSError]) -> None:
        ...
    
else:
    def peripheralDidUpdateRSSI_error_(self: PeripheralDelegate, peripheral: CBPeripheral, error: Optional[NSError]) -> None:
        ...
    
