"""
This type stub file was generated by pyright.
"""

from typing import Callable, Union
from uuid import UUID
from bleak.backends.bluezdbus.characteristic import BleakGATTCharacteristicBlueZDBus
from bleak.backends.client import BaseBleakClient
from bleak.backends.device import BLEDevice
from bleak.backends.service import BleakGATTServiceCollection

"""
BLE Client for BlueZ on Linux
"""
logger = ...
class BleakClientBlueZDBus(BaseBleakClient):
    """A native Linux Bleak Client

   """
    def __init__(self, address_or_ble_device: Union[BLEDevice, str], **kwargs) -> None:
        ...
    
    async def connect(self, **kwargs) -> bool:
        """Connect to the specified GATT se"""
        ...
    
    async def disconnect(self) -> bool:
        """Disconnect from the specified GA"""
        ...
    
    async def pair(self, *args, **kwargs) -> bool:
        """Pair with the peripheral.

     """
        ...
    
    async def unpair(self) -> bool:
        """Unpair with the peripheral.

   """
        ...
    
    @property
    def is_connected(self) -> bool:
        """Check connection status between """
        ...
    
    @property
    def mtu_size(self) -> int:
        """Get ATT MTU size for active conn"""
        ...
    
    async def get_services(self, **kwargs) -> BleakGATTServiceCollection:
        """Get all services registered for """
        ...
    
    async def read_gatt_char(self, char_specifier: Union[BleakGATTCharacteristicBlueZDBus, int, str, UUID], **kwargs) -> bytearray:
        """Perform read operation on the sp"""
        ...
    
    async def read_gatt_descriptor(self, handle: int, **kwargs) -> bytearray:
        """Perform read operation on the sp"""
        ...
    
    async def write_gatt_char(self, char_specifier: Union[BleakGATTCharacteristicBlueZDBus, int, str, UUID], data: Union[bytes, bytearray, memoryview], response: bool = ...) -> None:
        """Perform a write operation on the"""
        ...
    
    async def write_gatt_descriptor(self, handle: int, data: Union[bytes, bytearray, memoryview]) -> None:
        """Perform a write operation on the"""
        ...
    
    async def start_notify(self, char_specifier: Union[BleakGATTCharacteristicBlueZDBus, int, str, UUID], callback: Callable[[int, bytearray], None], **kwargs) -> None:
        """Activate notifications/indicatio"""
        ...
    
    async def stop_notify(self, char_specifier: Union[BleakGATTCharacteristicBlueZDBus, int, str, UUID]) -> None:
        """Deactivate notification/indicati"""
        ...
    


