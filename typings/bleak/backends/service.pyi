"""
This type stub file was generated by pyright.
"""

import abc
from uuid import UUID
from typing import Dict, Iterator, List, Optional, Union
from bleak.backends.characteristic import BleakGATTCharacteristic
from bleak.backends.descriptor import BleakGATTDescriptor

"""
Gatt Service Collection class a"""
logger = ...
class BleakGATTService(abc.ABC):
    """Interface for the Bleak represen"""
    def __init__(self, obj) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    @property
    @abc.abstractmethod
    def handle(self) -> int:
        """The handle of this service"""
        ...
    
    @property
    @abc.abstractmethod
    def uuid(self) -> str:
        """The UUID to this service"""
        ...
    
    @property
    def description(self) -> str:
        """String description for this serv"""
        ...
    
    @property
    @abc.abstractmethod
    def characteristics(self) -> List[BleakGATTCharacteristic]:
        """List of characteristics for this"""
        ...
    
    @abc.abstractmethod
    def add_characteristic(self, characteristic: BleakGATTCharacteristic):
        """Add a :py:class:`~BleakGATTChara"""
        ...
    
    def get_characteristic(self, uuid: Union[str, UUID]) -> Union[BleakGATTCharacteristic, None]:
        """Get a characteristic by UUID.

 """
        ...
    


class BleakGATTServiceCollection:
    """Simple data container for storin"""
    def __init__(self) -> None:
        ...
    
    def __getitem__(self, item: Union[str, int, UUID]) -> Optional[Union[BleakGATTService, BleakGATTCharacteristic, BleakGATTDescriptor]]:
        """Get a service, characteristic or"""
        ...
    
    def __iter__(self) -> Iterator[BleakGATTService]:
        """Returns an iterator over all Ble"""
        ...
    
    @property
    def services(self) -> Dict[int, BleakGATTService]:
        """Returns dictionary of handles ma"""
        ...
    
    @property
    def characteristics(self) -> Dict[int, BleakGATTCharacteristic]:
        """Returns dictionary of handles ma"""
        ...
    
    @property
    def descriptors(self) -> Dict[int, BleakGATTDescriptor]:
        """Returns a dictionary of integer """
        ...
    
    def add_service(self, service: BleakGATTService): # -> None:
        """Add a :py:class:`~BleakGATTServi"""
        ...
    
    def get_service(self, specifier: Union[int, str, UUID]) -> BleakGATTService:
        """Get a service by handle (int) or"""
        ...
    
    def add_characteristic(self, characteristic: BleakGATTCharacteristic): # -> None:
        """Add a :py:class:`~BleakGATTChara"""
        ...
    
    def get_characteristic(self, specifier: Union[int, str, UUID]) -> BleakGATTCharacteristic:
        """Get a characteristic by handle ("""
        ...
    
    def add_descriptor(self, descriptor: BleakGATTDescriptor): # -> None:
        """Add a :py:class:`~BleakGATTDescr"""
        ...
    
    def get_descriptor(self, handle: int) -> BleakGATTDescriptor:
        """Get a descriptor by integer hand"""
        ...
    


