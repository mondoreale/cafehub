"""
This type stub file was generated by pyright.
"""

import sys
from itertools import izip

"""Parse and format data types, fro"""
__all__ = ('parse', 'read_packet', 'read_message', 'read_bundle', 'format_bundle', 'format_message', 'MidiTuple')
if sys.version_info.major > 2:
    UNICODE = ...
    izip = ...
else:
    UNICODE = ...
INT = ...
FLOAT = ...
STRING = ...
TIME_TAG = ...
TP_PACKET_FORMAT = ...
NTP_DELTA = ...
NULL = ...
EMPTY = ...
INF = ...
MidiTuple = ...
def padded(l, n=...):
    """Return the size to pad a thing t"""
    ...

def parse_int(value, offset=..., **kwargs): # -> tuple[Any, int]:
    """Return an int from offset in val"""
    ...

def parse_float(value, offset=..., **kwargs): # -> tuple[Any, int]:
    """Return a float from offset in va"""
    ...

def parse_string(value, offset=..., encoding=..., encoding_errors=...): # -> tuple[str, int] | tuple[bytes, int]:
    """Return a string from offset in v"""
    ...

def parse_blob(value, offset=..., **kwargs): # -> tuple[tuple[Any, ...], Any]:
    """Return a blob from offset in val"""
    ...

def parse_midi(value, offset=..., **kwargs): # -> tuple[MidiTuple, int]:
    """Return a MIDI tuple from offset """
    ...

def format_midi(value): # -> Literal[0]:
    ...

def parse_true(*args, **kwargs): # -> tuple[Literal[True], Literal[0]]:
    ...

def format_true(value): # -> tuple[_T_co@tuple]:
    ...

def parse_false(*args, **kwargs): # -> tuple[Literal[False], Literal[0]]:
    ...

def format_false(value): # -> tuple[_T_co@tuple]:
    ...

def parse_nil(*args, **kwargs): # -> tuple[None, Literal[0]]:
    ...

def format_nil(value): # -> tuple[_T_co@tuple]:
    ...

def parse_infinitum(*args, **kwargs): # -> tuple[float, Literal[0]]:
    ...

def format_infinitum(value): # -> tuple[_T_co@tuple]:
    ...

PARSERS = ...
WRITERS = ...
PADSIZES = ...
def parse(hint, value, offset=..., encoding=..., encoding_errors=...): # -> tuple[Any, int] | tuple[str, int] | tuple[bytes, int] | tuple[tuple[Any, ...], Any] | tuple[MidiTuple, int] | tuple[Literal[True], Literal[0]] | tuple[Literal[False], Literal[0]] | tuple[None, Literal[0]] | tuple[float, Literal[0]]:
    """Call the correct parser function"""
    ...

def format_message(address, values, encoding=..., encoding_errors=...):
    """Create a message."""
    ...

def read_message(data, offset=..., encoding=..., encoding_errors=...): # -> tuple[str | bytes, str | bytes, list[Unknown], int | Any]:
    """Return address, tags, values, an"""
    ...

def time_to_timetag(value): # -> tuple[Literal[0], Literal[1]] | tuple[int, int]:
    """Create a timetag from a time.

 """
    ...

def timetag_to_time(timetag): # -> float:
    """Decode a timetag to a time.

   """
    ...

def format_bundle(data, timetag=..., encoding=..., encoding_errors=...): # -> tuple[bytes, Stats | Unknown]:
    """Create a bundle from a list of ("""
    ...

def read_bundle(data, encoding=..., encoding_errors=...): # -> tuple[float | Any, list[Unknown]]:
    """Decode a bundle into a (timestam"""
    ...

def read_packet(data, drop_late=..., encoding=..., encoding_errors=...): # -> list[tuple[str | bytes, str | bytes, list[Unknown], int | Any]]:
    """Detect if the data received is a"""
    ...

