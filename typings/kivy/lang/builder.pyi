"""
This type stub file was generated by pyright.
"""

from os import environ
from typing import Any
from kivy.lang.parser import ParserException

from uix.widget import Widget

'''
Builder
======

Class used for '''
__all__ = ('Observable', 'Builder', 'BuilderBase', 'BuilderException')
trace = ...
Instruction = ...
_delayed_start = ...
class BuilderException(ParserException):
    '''Exception raised when the Builde'''
    ...


def get_proxy(widget):
    ...

def custom_callback(__kvlang__, idmap, *largs, **kwargs): # -> None:
    ...

def call_fn(args, instance, v): # -> None:
    ...

def delayed_call_fn(args, instance, v): # -> None:
    ...

def update_intermediates(base, keys, bound, s, fn, args, instance, value):
    ''' Function that is called when an'''
    ...

def create_handler(iself, element, key, value, rule, idmap, delayed=...):
    ...

class BuilderBase:
    '''The Builder is responsible for c'''
    def __init__(self) -> None:
        ...
    
    @classmethod
    def create_from(cls, builder) -> 'BuilderBase':
        """Creates a instance of the class,"""
        ...
    
    def load_file(self, filename, encoding=..., **kwargs):
        '''Insert a file into the language '''
        ...
    
    def unload_file(self, filename): # -> None:
        '''Unload all rules associated with'''
        ...
    
    def load_string(self, string : str, **kwargs : Any) -> Widget:
        '''Insert a string into the Languag'''
        ...
    
    def template(self, *args, **ctx): # -> Any:
        '''Create a specialized template us'''
        ...
    
    def apply_rules(self, widget, rule_name, ignored_consts=..., rule_children=..., dispatch_kv_post=...): # -> None:
        '''Search all the rules that match '''
        ...
    
    def apply(self, widget, ignored_consts=..., rule_children=..., dispatch_kv_post=...): # -> None:
        '''Search all the rules that match '''
        ...
    
    def match(self, widget): # -> list[Unknown]:
        '''Return a list of :class:`ParserR'''
        ...
    
    def match_rule_name(self, rule_name): # -> list[Unknown]:
        '''Return a list of :class:`ParserR'''
        ...
    
    def sync(self): # -> None:
        '''Execute all the waiting operatio'''
        ...
    
    def unbind_widget(self, uid): # -> None:
        '''Unbind all the handlers created '''
        ...
    
    def unbind_property(self, widget, name): # -> None:
        '''Unbind the handlers created by a'''
        ...
    


Builder: BuilderBase = ...
if 'KIVY_PROFILE_LANG' in environ:
    def match_rule(fn, index, rule): # -> Generator[Unknown, None, None]:
        ...
    
    def dump_builder_stats(): # -> None:
        ...
    
