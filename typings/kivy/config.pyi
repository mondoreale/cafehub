"""
This type stub file was generated by pyright.
"""

from os import environ

'''
Configuration object
=========='''
__all__ = ('Config', 'ConfigParser')
_is_rpi = ...
KIVY_CONFIG_VERSION = ...
Config = ...
class ConfigParser(PythonConfigParser):
    '''Enhanced ConfigParser class that'''
    def __init__(self, name=..., **kwargs) -> None:
        ...
    
    def add_callback(self, callback, section=..., key=...): # -> None:
        '''Add a callback to be called when'''
        ...
    
    def remove_callback(self, callback, section=..., key=...): # -> None:
        '''Removes a callback added with :m'''
        ...
    
    def read(self, filename): # -> None:
        '''Read only one filename. In contr'''
        ...
    
    def set(self, section, option, value): # -> None:
        '''Functions similarly to PythonCon'''
        ...
    
    def setall(self, section, keyvalues): # -> None:
        '''Sets multiple key-value pairs in'''
        ...
    
    def get(self, section, option, **kwargs): # -> str:
        ...
    
    def setdefaults(self, section, keyvalues): # -> None:
        '''Set multiple key-value defaults '''
        ...
    
    def setdefault(self, section, option, value): # -> None:
        '''Set the default value for an opt'''
        ...
    
    def getdefault(self, section, option, defaultvalue): # -> str:
        '''Get the value of an option in th'''
        ...
    
    def getdefaultint(self, section, option, defaultvalue): # -> int:
        '''Get the value of an option in th'''
        ...
    
    def adddefaultsection(self, section): # -> None:
        '''Add a section if the section is '''
        ...
    
    def write(self): # -> bool:
        '''Write the configuration to the l'''
        ...
    
    def update_config(self, filename, overwrite=...): # -> None:
        '''Upgrade the configuration based '''
        ...
    
    @staticmethod
    def get_configparser(name): # -> None:
        '''Returns the :class:`ConfigParser'''
        ...
    
    _named_configs = ...
    _name = ...
    @property
    def name(self): # -> str:
        ''' The name associated with this C'''
        ...
    
    @name.setter
    def name(self, value):
        ...
    


if notenviron.get('KIVY_DOC_INCLUDE'):
    Config = ...
    version = ...
    need_save = ...
