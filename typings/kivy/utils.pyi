"""
This type stub file was generated by pyright.
"""

'''
Utils
=====

The Utils module p'''
__all__ = ('intersection', 'difference', 'strtotuple', 'get_color_from_hex', 'get_hex_from_color', 'get_random_color', 'is_color_transparent', 'hex_colormap', 'colormap', 'boundary', 'deprecated', 'SafeList', 'interpolate', 'QueryDict', 'platform', 'escape_markup', 'reify', 'rgba', 'pi_version')
from typing import Union
from typing_extensions import Literal


def boundary(value, minvalue, maxvalue):
    '''Limit a value between a minvalue'''
    ...

def intersection(set1, set2): # -> list[Unknown]:
    '''Return the intersection of 2 lis'''
    ...

def difference(set1, set2): # -> list[Unknown]:
    '''Return the difference between 2 '''
    ...

def interpolate(value_from, value_to, step=...): # -> list[Unknown]:
    '''Interpolate between two values. '''
    ...

def strtotuple(s): # -> Any:
    '''Convert a tuple string into a tu'''
    ...

def rgba(s, *args): # -> list[float] | list[Unknown]:
    '''Return a Kivy color (4 value fro'''
    ...

def get_color_from_hex(s): # -> list[float]:
    '''Transform a hex string color to '''
    ...

def get_hex_from_color(color): # -> str:
    '''Transform a kivy :class:`~kivy.g'''
    ...

def get_random_color(alpha=...): # -> list[float]:
    '''Returns a random color (4 tuple)'''
    ...

def is_color_transparent(c): # -> bool:
    '''Return True if the alpha channel'''
    ...

hex_colormap = ...
colormap = ...
DEPRECATED_CALLERS = ...
def deprecated(func=..., msg=...): # -> partial[Unknown] | ((*args: Unknown, **kwargs: Unknown) -> Unknown):
    '''This is a decorator which can be'''
    ...

class SafeList(list):
    '''List with a clear() method.

   '''
    @deprecated
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def clear(self): # -> None:
        ...
    
    @deprecated
    def iterate(self, reverse=...): # -> reversed[Unknown] | Iterator[Unknown]:
        ...
    


class QueryDict(dict):
    '''QueryDict is a dict() that can b'''
    def __getattr__(self, attr):
        ...
    
    def __setattr__(self, attr, value): # -> None:
        ...
    


def format_bytes_to_human(size, precision=...): # -> str | None:
    '''Format a byte value to a human r'''
    ...

platform : Literal['win', 'linux', 'android', 'macosx', 'unknown']

def escape_markup(text):
    '''
    Escape markup characters fo'''
    ...

class reify:
    '''
    Put the result of a method '''
    def __init__(self, func) -> None:
        ...
    
    def __get__(self, inst, cls): # -> Self@reify:
        ...
    


pi_version = ...
