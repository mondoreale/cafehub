"""
This type stub file was generated by pyright.
"""

'''
.. _motionevent:

Motion Event
'''
__all__ = ('MotionEvent', )
class EnhancedDictionary(dict):
    def __getattr__(self, attr):
        ...
    
    def __setattr__(self, attr, value): # -> None:
        ...
    


class MotionEventMetaclass(type):
    def __new__(mcs, name, bases, attrs): # -> Self@MotionEventMetaclass:
        ...
    


MotionEventBase = ...
class MotionEvent(MotionEventBase):
    '''Abstract class that represents a'''
    __uniq_id = ...
    __attrs__ = ...
    def __init__(self, device, id, args, is_touch=..., type_id=...) -> None:
        ...
    
    def depack(self, args): # -> None:
        '''Depack `args` into attributes of'''
        ...
    
    def grab(self, class_instance, exclusive=...): # -> None:
        '''Grab this motion event.

       '''
        ...
    
    def ungrab(self, class_instance): # -> None:
        '''Ungrab a previously grabbed moti'''
        ...
    
    def dispatch_done(self): # -> None:
        '''Notify that dispatch to the list'''
        ...
    
    def move(self, args): # -> None:
        '''Move to another position.
      '''
        ...
    
    def scale_for_screen(self, w, h, p=..., rotation=..., smode=..., kheight=...): # -> None:
        '''Scale position for the screen.

'''
        ...
    
    def to_absolute_pos(self, nx, ny, x_max, y_max, rotation): # -> tuple[Unknown, Unknown]:
        '''Transforms normalized (0-1) coor'''
        ...
    
    def push(self, attrs=...): # -> None:
        '''Push attribute values in `attrs`'''
        ...
    
    def pop(self): # -> None:
        '''Pop attributes values from the s'''
        ...
    
    def apply_transform_2d(self, transform): # -> None:
        '''Apply a transformation on x, y, '''
        ...
    
    def copy_to(self, to): # -> None:
        '''Copy some attribute to another m'''
        ...
    
    def distance(self, other_touch): # -> float:
        '''Return the distance between the '''
        ...
    
    def update_time_end(self): # -> None:
        ...
    
    @property
    def dpos(self): # -> tuple[Unknown | None, Unknown | None]:
        '''Return delta between last positi'''
        ...
    
    @property
    def opos(self): # -> tuple[Unknown | None, Unknown | None]:
        '''Return the initial position of t'''
        ...
    
    @property
    def ppos(self): # -> tuple[Unknown | None, Unknown | None]:
        '''Return the previous position of '''
        ...
    
    @property
    def spos(self): # -> tuple[float, float]:
        '''Return the position in the 0-1 c'''
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def is_mouse_scrolling(self, *args): # -> Literal[False]:
        '''Returns True if the touch event '''
        ...
    


