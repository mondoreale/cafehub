"""
This type stub file was generated by pyright.
"""

import time
from os import environ

'''
Clock object
============

The '''
__all__ = ('Clock', 'ClockNotRunningError', 'ClockEvent', 'FreeClockEvent', 'CyClockBase', 'CyClockBaseFree', 'triggered', 'ClockBaseBehavior', 'ClockBaseInterruptBehavior', 'ClockBaseInterruptFreeBehavior', 'ClockBase', 'ClockBaseInterrupt', 'ClockBaseFreeInterruptAll', 'ClockBaseFreeInterruptOnly', 'mainthread')
class ClockBaseBehavior:
    '''The base of the kivy clock.

   '''
    _dt = ...
    _last_fps_tick = ...
    _start_tick = ...
    _fps = ...
    _rfps = ...
    _fps_counter = ...
    _rfps_counter = ...
    _frames = ...
    _frames_displayed = ...
    _events_duration = ...
    _duration_count = ...
    _sleep_time = ...
    _duration_ts0 = ...
    MIN_SLEEP = ...
    SLEEP_UNDERSHOOT = ...
    _async_lib = ...
    _async_wait_for = ...
    def __init__(self, async_lib=..., **kwargs) -> None:
        ...
    
    def init_async_lib(self, lib): # -> None:
        """Manually sets the async library """
        ...
    
    @property
    def frametime(self): # -> float:
        '''Time spent between the last fram'''
        ...
    
    @property
    def frames(self): # -> int:
        '''Number of internal frames (not n'''
        ...
    
    @property
    def frames_displayed(self): # -> int:
        '''Number of displayed frames from '''
        ...
    
    def usleep(self, microseconds): # -> None:
        '''Sleeps for the number of microse'''
        ...
    
    def idle(self): # -> float:
        '''(internal) waits here until the '''
        ...
    
    async def async_idle(self): # -> float:
        '''(internal) async version of :met'''
        ...
    
    def tick(self): # -> None:
        '''Advance the clock to the next st'''
        ...
    
    async def async_tick(self): # -> None:
        '''async version of :meth:`tick`. '''
        ...
    
    def pre_idle(self): # -> None:
        '''Called before :meth:`idle` by :m'''
        ...
    
    def post_idle(self, ts, current): # -> float:
        '''Called after :meth:`idle` by :me'''
        ...
    
    def tick_draw(self): # -> None:
        '''Tick the drawing counter.
      '''
        ...
    
    def get_fps(self): # -> int | float:
        '''Get the current average FPS calc'''
        ...
    
    def get_rfps(self): # -> int:
        '''Get the current "real" FPS calcu'''
        ...
    
    def get_time(self): # -> float:
        '''Get the last tick made by the cl'''
        ...
    
    def get_boottime(self): # -> float:
        '''Get the time in seconds from the'''
        ...
    
    time = ...
    def handle_exception(self, e): # -> None:
        ...
    


class ClockBaseInterruptBehavior(ClockBaseBehavior):
    '''A kivy clock which can be interr'''
    interupt_next_only = ...
    _event = ...
    _async_event = ...
    _get_min_timeout_func = ...
    def __init__(self, interupt_next_only=..., **kwargs) -> None:
        ...
    
    def init_async_lib(self, lib): # -> None:
        ...
    
    def usleep(self, microseconds): # -> None:
        ...
    
    async def async_usleep(self, microseconds): # -> None:
        ...
    
    def on_schedule(self, event): # -> None:
        ...
    
    def idle(self): # -> float:
        ...
    
    async def async_idle(self): # -> float:
        ...
    


class ClockBaseInterruptFreeBehavior(ClockBaseInterruptBehavior):
    '''A base class for the clock that '''
    def __init__(self, **kwargs) -> None:
        ...
    
    def on_schedule(self, event): # -> None:
        ...
    


class ClockBase(ClockBaseBehavior, CyClockBase):
    '''The ``default`` kivy clock. See '''
    _sleep_obj = ...
    def __init__(self, **kwargs) -> None:
        ...
    
    def usleep(self, microseconds): # -> None:
        ...
    


class ClockBaseInterrupt(ClockBaseInterruptBehavior, CyClockBase):
    '''The ``interrupt`` kivy clock. Se'''
    ...


class ClockBaseFreeInterruptAll(ClockBaseInterruptFreeBehavior, CyClockBaseFree):
    '''The ``free_all`` kivy clock. See'''
    ...


class ClockBaseFreeInterruptOnly(ClockBaseInterruptFreeBehavior, CyClockBaseFree):
    '''The ``free_only`` kivy clock. Se'''
    def idle(self): # -> float:
        ...
    
    async def async_idle(self): # -> float:
        ...
    


def mainthread(func): # -> (*args: Unknown, **kwargs: Unknown) -> None:
    '''Decorator that will schedule the'''
    ...

def triggered(timeout=..., interval=...): # -> (func: Unknown) -> ((*args: Unknown, **kwargs: Unknown) -> None):
    '''Decorator that will trigger the '''
    ...

if 'KIVY_DOC_INCLUDE' in environ:
    Clock: ClockBase = ...
else:
    _classes = ...
    _clk = ...
    Clock: ClockBase = ...
