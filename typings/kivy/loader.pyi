"""
This type stub file was generated by pyright.
"""

from kivy.core.image import Image
from os import environ
from threading import Thread

'''
Asynchronous data loader
======'''
__all__ = ('Loader', 'LoaderBase', 'ProxyImage')
class ProxyImage(Image):
    '''Image returned by the Loader.ima'''
    __events__ = ...
    def __init__(self, arg, **kwargs) -> None:
        ...
    
    def on_load(self): # -> None:
        ...
    
    def on_error(self, error): # -> None:
        ...
    


class LoaderBase:
    '''Common base for the Loader and s'''
    _trigger_update = ...
    EXT_ALIAS = ...
    def __init__(self) -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    
    num_workers = ...
    max_upload_per_frame = ...
    loading_image = ...
    error_image = ...
    def start(self): # -> None:
        '''Start the loader thread/process.'''
        ...
    
    def run(self, *largs): # -> None:
        '''Main loop for the loader.'''
        ...
    
    def stop(self): # -> None:
        '''Stop the loader thread/process.'''
        ...
    
    def pause(self): # -> None:
        '''Pause the loader, can be useful '''
        ...
    
    def resume(self): # -> None:
        '''Resume the loader, after a :meth'''
        ...
    
    def image(self, filename, load_callback=..., post_callback=..., **kwargs): # -> ProxyImage:
        '''Load a image using the Loader. A'''
        ...
    
    def remove_from_cache(self, filename): # -> None:
        ...
    


if 'KIVY_DOC' in environ:
    Loader = ...
else:
    class _Worker(Thread):
        '''Thread executing tasks from a gi'''
        def __init__(self, pool, tasks) -> None:
            ...
        
        def run(self): # -> None:
            ...
        
    
    
    class _ThreadPool:
        '''Pool of threads consuming tasks '''
        def __init__(self, num_threads) -> None:
            ...
        
        def add_task(self, func, *args, **kargs): # -> None:
            '''Add a task to the queue
        '''
            ...
        
        def stop(self): # -> None:
            ...
        
    
    
    class LoaderThreadPool(LoaderBase):
        def __init__(self) -> None:
            ...
        
        def start(self): # -> None:
            ...
        
        def stop(self): # -> None:
            ...
        
        def run(self, *largs): # -> None:
            ...
        
    
    
    Loader = ...
