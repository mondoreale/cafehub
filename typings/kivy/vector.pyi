"""
This type stub file was generated by pyright.
"""

'''Vector
======

The :class:`Vecto'''
__all__ = ('Vector', )
class Vector(list):
    '''Vector class. See module documen'''
    def __init__(self, *largs) -> None:
        ...
    
    x = ...
    y = ...
    def __getslice__(self, i, j): # -> Vector:
        ...
    
    def __add__(self, val): # -> Vector:
        ...
    
    def __iadd__(self, val): # -> Self@Vector:
        ...
    
    def __neg__(self): # -> Vector:
        ...
    
    def __sub__(self, val): # -> Vector:
        ...
    
    def __isub__(self, val): # -> Self@Vector:
        ...
    
    def __mul__(self, val): # -> Vector:
        ...
    
    def __imul__(self, val): # -> Self@Vector:
        ...
    
    def __rmul__(self, val):
        ...
    
    def __truediv__(self, val): # -> Vector:
        ...
    
    def __div__(self, val): # -> Vector:
        ...
    
    def __rtruediv__(self, val): # -> Vector:
        ...
    
    def __rdiv__(self, val): # -> Vector:
        ...
    
    def __idiv__(self, val): # -> Self@Vector:
        ...
    
    def length(self): # -> float:
        '''Returns the length of a vector.
'''
        ...
    
    def length2(self):
        '''Returns the length of a vector s'''
        ...
    
    def distance(self, to): # -> float:
        '''Returns the distance between two'''
        ...
    
    def distance2(self, to):
        '''Returns the distance between two'''
        ...
    
    def normalize(self): # -> Vector:
        '''Returns a new vector that has th'''
        ...
    
    def dot(self, a):
        '''Computes the dot product of a an'''
        ...
    
    def angle(self, a): # -> float:
        '''Computes the angle between a and'''
        ...
    
    def rotate(self, angle): # -> Vector:
        '''Rotate the vector with an angle '''
        ...
    
    @staticmethod
    def line_intersection(v1, v2, v3, v4): # -> Vector | None:
        '''
        Finds the intersection '''
        ...
    
    @staticmethod
    def segment_intersection(v1, v2, v3, v4):
        '''
        Finds the intersection '''
        ...
    
    @staticmethod
    def in_bbox(point, a, b):
        '''Return True if `point` is in the'''
        ...
    


