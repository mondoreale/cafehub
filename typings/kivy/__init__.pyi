"""
This type stub file was generated by pyright.
"""

import sys
import shutil
import pkgutil
import re
from getopt import GetoptError, getopt
from os import environ, mkdir
from os.path import basename, dirname, exists, expanduser, join
from kivy.logger import LOG_LEVELS, Logger, file_log_handler
from kivy.utils import platform
from kivy._version import RELEASE as _KIVY_RELEASE, __version__, _kivy_build_date, _kivy_git_hash
from kivy.config import Config
from kivy.modules import Modules

'''
Kivy framework
==============

'''
__all__ = ('require', 'parse_kivy_version', 'kivy_configure', 'kivy_register_post_configuration', 'kivy_options', 'kivy_base_dir', 'kivy_modules_dir', 'kivy_data_dir', 'kivy_shader_dir', 'kivy_icons_dir', 'kivy_home_dir', 'kivy_config_fn', 'kivy_usermodules_dir', 'kivy_examples_dir')
__kivy_post_configuration = ...
if platform == 'macosx' and sys.maxsize < 9223372036854775807:
    r = ...
if sys.version_info[0] == 2:
    ...
def parse_kivy_version(version): # -> tuple[list[int], str | Any, str | Any]:
    """Parses the kivy version as descr"""
    ...

def require(version): # -> None:
    '''Require can be used to check the'''
    ...

def kivy_configure(): # -> None:
    '''Call post-configuration of Kivy.'''
    ...

def get_includes(): # -> list[str]:
    '''Retrieves the directories contai'''
    ...

def kivy_register_post_configuration(callback): # -> None:
    '''Register a function to be called'''
    ...

def kivy_usage(): # -> None:
    '''Kivy Usage: %s [OPTION...]::

  '''
    ...

kivy_options = ...
kivy_base_dir = ...
kivy_modules_dir = ...
kivy_data_dir = ...
kivy_binary_deps_dir = ...
kivy_shader_dir = ...
kivy_icons_dir = ...
kivy_home_dir = ...
kivy_config_fn = ...
kivy_usermodules_dir = ...
kivy_examples_dir = ...
_packages = ...
_logging_msgs = ...
if any(name in sys.argv[0] for name in ('sphinx-build', 'autobuild.py')):
    ...
if 'sphinx-build' in sys.argv[0]:
    ...
if any(('nosetests' in arg or 'pytest' in arg) for arg in sys.argv):
    ...
if any('pyinstaller' in arg.lower() for arg in sys.argv):
    ...
if notenviron.get('KIVY_DOC_INCLUDE'):
    kivy_config_fn = ...
    kivy_usermodules_dir = ...
    icon_dir = ...
    level = ...
    need_save = ...
if _KIVY_RELEASE:
    ...
else:
    ...
if file_log_handler is not None:
    ...
