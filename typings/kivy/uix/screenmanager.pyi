"""
This type stub file was generated by pyright.
"""

from kivy.event import EventDispatcher
from kivy.uix.floatlayout import FloatLayout
from kivy.uix.relativelayout import RelativeLayout
from kivy.app import App

'''Screen Manager
==============

.'''
__all__ = ('Screen', 'ScreenManager', 'ScreenManagerException', 'TransitionBase', 'ShaderTransition', 'SlideTransition', 'SwapTransition', 'FadeTransition', 'WipeTransition', 'FallOutTransition', 'RiseInTransition', 'NoTransition', 'CardTransition')
class ScreenManagerException(Exception):
    '''Exception for the :class:`Screen'''
    ...


class Screen(RelativeLayout):
    '''Screen is an element intended to'''
    name = ...
    manager = ...
    transition_progress = ...
    transition_state = ...
    __events__ = ...
    def on_pre_enter(self, *args): # -> None:
        ...
    
    def on_enter(self, *args): # -> None:
        ...
    
    def on_pre_leave(self, *args): # -> None:
        ...
    
    def on_leave(self, *args): # -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class TransitionBase(EventDispatcher):
    '''TransitionBase is used to animat'''
    screen_out = ...
    screen_in = ...
    duration = ...
    manager = ...
    is_active = ...
    _anim = ...
    __events__ = ...
    def start(self, manager): # -> None:
        '''(internal) Starts the transition'''
        ...
    
    def stop(self): # -> None:
        '''(internal) Stops the transition.'''
        ...
    
    def add_screen(self, screen): # -> None:
        '''(internal) Used to add a screen '''
        ...
    
    def remove_screen(self, screen): # -> None:
        '''(internal) Used to remove a scre'''
        ...
    
    def on_complete(self): # -> None:
        ...
    
    def on_progress(self, progression): # -> None:
        ...
    


class ShaderTransition(TransitionBase):
    '''Transition class that uses a Sha'''
    fs = ...
    vs = ...
    clearcolor = ...
    def make_screen_fbo(self, screen): # -> Fbo:
        ...
    
    def on_progress(self, progress): # -> None:
        ...
    
    def on_complete(self): # -> None:
        ...
    
    def add_screen(self, screen): # -> None:
        ...
    
    def remove_screen(self, screen): # -> None:
        ...
    
    def stop(self): # -> None:
        ...
    


class NoTransition(TransitionBase):
    '''No transition, instantly switche'''
    duration = ...
    def on_complete(self): # -> None:
        ...
    


class SlideTransition(TransitionBase):
    '''Slide Transition, can be used to'''
    direction = ...
    def on_progress(self, progression): # -> None:
        ...
    
    def on_complete(self): # -> None:
        ...
    


class CardTransition(SlideTransition):
    '''Card transition that looks simil'''
    mode = ...
    def start(self, manager): # -> None:
        '''(internal) Starts the transition'''
        ...
    
    def on_progress(self, progression):
        ...
    


class SwapTransition(TransitionBase):
    '''Swap transition that looks like '''
    def __init__(self, **kwargs) -> None:
        ...
    
    def start(self, manager): # -> None:
        ...
    
    def update_scale(self, screen, center): # -> None:
        ...
    
    def add_screen(self, screen): # -> None:
        ...
    
    def on_complete(self): # -> None:
        ...
    
    def on_progress(self, progression): # -> None:
        ...
    


class WipeTransition(ShaderTransition):
    '''Wipe transition, based on a frag'''
    WIPE_TRANSITION_FS = ...
    fs = ...


class FadeTransition(ShaderTransition):
    '''Fade transition, based on a frag'''
    FADE_TRANSITION_FS = ...
    fs = ...


class FallOutTransition(ShaderTransition):
    '''Transition where the new screen '''
    duration = ...
    FALLOUT_TRANSITION_FS = ...
    fs = ...


class RiseInTransition(ShaderTransition):
    '''Transition where the new screen '''
    duration = ...
    RISEIN_TRANSITION_FS = ...
    fs = ...


class ScreenManager(FloatLayout):
    '''Screen manager. This is the main'''
    current = ...
    transition = ...
    screens = ...
    current_screen = ...
    screen_names = ...
    def __init__(self, **kwargs) -> None:
        ...
    
    def add_widget(self, widget, *args, **kwargs): # -> None:
        '''
        .. versionchanged:: 2.1'''
        ...
    
    def remove_widget(self, widget, *args, **kwargs): # -> None:
        ...
    
    def clear_widgets(self, children=..., *args, **kwargs): # -> None:
        '''
        .. versionchanged:: 2.1'''
        ...
    
    def real_add_widget(self, screen, *args): # -> None:
        ...
    
    def real_remove_widget(self, screen, *args): # -> None:
        ...
    
    def on_current(self, instance, value): # -> None:
        ...
    
    def get_screen(self, name):
        '''Return the screen widget associa'''
        ...
    
    def has_screen(self, name): # -> bool:
        '''Return True if a screen with the'''
        ...
    
    def __next__(self): # -> None:
        '''Py2K backwards compatibility wit'''
        ...
    
    def next(self): # -> None:
        '''Return the name of the next scre'''
        ...
    
    def previous(self): # -> None:
        '''Return the name of the previous '''
        ...
    
    def switch_to(self, screen, **options): # -> None:
        '''Add a new or existing screen to '''
        ...
    
    def on_motion(self, etype, me): # -> Literal[False]:
        ...
    
    def on_touch_down(self, touch): # -> Literal[False]:
        ...
    
    def on_touch_move(self, touch): # -> Literal[False]:
        ...
    
    def on_touch_up(self, touch): # -> Literal[False]:
        ...
    


if __name__ == '__main__':
    class TestApp(App):
        def change_view(self, *l): # -> None:
            ...
        
        def remove_screen(self, *l): # -> None:
            ...
        
        def build(self): # -> FloatLayout:
            ...
        
    
    
