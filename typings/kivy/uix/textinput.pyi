"""
This type stub file was generated by pyright.
"""

from os import environ
from kivy.config import Config
from kivy.uix.behaviors import ButtonBehavior, FocusBehavior
from kivy.uix.widget import Widget
from kivy.uix.bubble import Bubble
from kivy.uix.image import Image
from kivy.app import App

'''
Text Input
==========

.. versi'''
__all__ = ('TextInput', )
if 'KIVY_DOC' in environ:
    def triggered(*_, **__): # -> (func: Unknown) -> ((*args: Unknown, **kwargs: Unknown) -> Unknown):
        ...
    
else:
    ...
Cache_register = ...
Cache_append = ...
Cache_get = ...
Cache_remove = ...
FL_IS_LINEBREAK = ...
FL_IS_WORDBREAK = ...
FL_IS_NEWLINE = ...
Clipboard = ...
CutBuffer = ...
MarkupLabel = ...
_platform = ...
_textinput_list = ...
_is_osx = ...
_is_desktop = ...
_scroll_timeout = ...
if Config:
    _is_desktop = ...
    _scroll_timeout = ...
    _scroll_distance = ...
if 'KIVY_DOC' not in environ:
    ...
class Selector(ButtonBehavior, Image):
    window = ...
    target = ...
    matrix = ...
    def __init__(self, **kwargs) -> None:
        ...
    
    def update_transform(self, cb): # -> None:
        ...
    
    def transform_touch(self, touch): # -> None:
        ...
    
    def on_touch_down(self, touch): # -> bool | None:
        ...
    


class TextInputCutCopyPaste(Bubble):
    textinput = ...
    but_cut = ...
    but_copy = ...
    but_paste = ...
    but_selectall = ...
    matrix = ...
    _check_parent_ev = ...
    def __init__(self, **kwargs) -> None:
        ...
    
    def update_transform(self, cb): # -> None:
        ...
    
    def transform_touch(self, touch): # -> None:
        ...
    
    def on_touch_down(self, touch):
        ...
    
    def on_touch_up(self, touch):
        ...
    
    def on_textinput(self, instance, value): # -> None:
        ...
    
    def on_parent(self, instance, value): # -> None:
        ...
    
    def do(self, action): # -> None:
        ...
    
    def hide(self): # -> None:
        ...
    


class TextInput(FocusBehavior, Widget):
    '''TextInput class. See module docu'''
    __events__ = ...
    _resolved_base_dir = ...
    def __init__(self, **kwargs) -> None:
        ...
    
    def on_text_validate(self): # -> None:
        ...
    
    def cursor_index(self, cursor=...):
        '''Return the cursor index in the t'''
        ...
    
    def cursor_offset(self): # -> Literal[0]:
        '''Get the cursor x offset on the c'''
        ...
    
    def get_cursor_from_index(self, index): # -> tuple[Literal[0], Literal[0]] | tuple[Unknown, int] | tuple[int, int]:
        '''Return the (col, row) of the cur'''
        ...
    
    def select_text(self, start, end): # -> None:
        ''' Select a portion of text displa'''
        ...
    
    def select_all(self): # -> None:
        ''' Select all of the text displaye'''
        ...
    
    re_indent = ...
    def insert_text(self, substring, from_undo=...):
        '''Insert new text at the current c'''
        ...
    
    def reset_undo(self): # -> None:
        '''Reset undo and redo lists from m'''
        ...
    
    def do_redo(self): # -> None:
        '''Do redo operation.

        .. v'''
        ...
    
    def do_undo(self): # -> None:
        '''Do undo operation.

        .. v'''
        ...
    
    def do_backspace(self, from_undo=..., mode=...):
        '''Do backspace operation from the '''
        ...
    
    _re_whitespace = ...
    @property
    def pgmove_speed(self): # -> int:
        """how much vertical distance hitti"""
        ...
    
    def do_cursor_movement(self, action, control=..., alt=...):
        '''Move the cursor relative to its '''
        ...
    
    def get_cursor_from_xy(self, x, y):
        '''Return the (col, row) of the cur'''
        ...
    
    def cancel_selection(self): # -> None:
        '''Cancel current selection (if any'''
        ...
    
    def delete_selection(self, from_undo=...): # -> None:
        '''Delete the current text selectio'''
        ...
    
    def long_touch(self, dt): # -> None:
        ...
    
    def cancel_long_touch_event(self): # -> None:
        ...
    
    def on_double_tap(self): # -> None:
        '''This event is dispatched when a '''
        ...
    
    def on_triple_tap(self): # -> None:
        '''This event is dispatched when a '''
        ...
    
    def on_quad_touch(self): # -> None:
        '''This event is dispatched when fo'''
        ...
    
    def on_touch_down(self, touch):
        ...
    
    def on_touch_move(self, touch): # -> bool | None:
        ...
    
    def on_touch_up(self, touch):
        ...
    
    def scroll_text_from_swipe(self, touch): # -> bool:
        ...
    
    def cut(self): # -> None:
        ''' Copy current selection to clipb'''
        ...
    
    def copy(self, data=...): # -> None:
        ''' Copy the value provided in argu'''
        ...
    
    def paste(self): # -> None:
        ''' Insert text from system :class:'''
        ...
    
    def on_cursor_blink(self, instance, value): # -> None:
        """trigger blink event reset to swi"""
        ...
    
    def on_cursor(self, instance, value): # -> None:
        """
        When the cursor is move"""
        ...
    
    def on_size(self, instance, value): # -> None:
        ...
    
    _tokenize_delimiters = ...
    def keyboard_on_key_down(self, window, keycode, text, modifiers):
        ...
    
    def keyboard_on_key_up(self, window, keycode): # -> None:
        ...
    
    def keyboard_on_textinput(self, window, text): # -> None:
        ...
    
    _ime_composition = ...
    _ime_cursor = ...
    def window_on_textedit(self, window, ime_input): # -> None:
        ...
    
    def on__hint_text(self, instance, value): # -> None:
        ...
    
    _lines = ...
    _hint_text_lines = ...
    _editable = ...
    _insert_int_pat = ...
    _insert_float_pat = ...
    _cursor_blink = ...
    _cursor_visual_pos = ...
    _cursor_visual_height = ...
    readonly = ...
    text_validate_unfocus = ...
    multiline = ...
    do_wrap = ...
    password = ...
    password_mask = ...
    cursor_blink = ...
    cursor = ...
    cursor_col = ...
    cursor_row = ...
    cursor_pos = ...
    cursor_color = ...
    cursor_width = ...
    line_height = ...
    tab_width = ...
    padding_x = ...
    def on_padding_x(self, instance, value): # -> None:
        ...
    
    padding_y = ...
    def on_padding_y(self, instance, value): # -> None:
        ...
    
    padding = ...
    halign = ...
    scroll_x = ...
    scroll_y = ...
    selection_color = ...
    border = ...
    background_normal = ...
    background_disabled_normal = ...
    background_active = ...
    background_color = ...
    foreground_color = ...
    disabled_foreground_color = ...
    use_bubble = ...
    use_handles = ...
    scroll_from_swipe = ...
    scroll_distance = ...
    scroll_timeout = ...
    def get_sel_from(self): # -> int | None:
        ...
    
    selection_from = ...
    def get_sel_to(self): # -> int | None:
        ...
    
    selection_to = ...
    selection_text = ...
    def on_selection_text(self, instance, value): # -> None:
        ...
    
    text = ...
    font_name = ...
    font_size = ...
    font_context = ...
    font_family = ...
    base_direction = ...
    text_language = ...
    _hint_text = ...
    hint_text = ...
    hint_text_color = ...
    auto_indent = ...
    replace_crlf = ...
    allow_copy = ...
    minimum_height = ...
    line_spacing = ...
    input_filter = ...
    handle_image_middle = ...
    def on_handle_image_middle(self, instance, value): # -> None:
        ...
    
    handle_image_left = ...
    def on_handle_image_left(self, instance, value): # -> None:
        ...
    
    handle_image_right = ...
    def on_handle_image_right(self, instance, value): # -> None:
        ...
    
    write_tab = ...


if __name__ == '__main__':
    KV = ...
    class TextInputApp(App):
        time = ...
        def build(self):
            ...
        
        def update_time(self, dt): # -> None:
            ...
        
    
    
