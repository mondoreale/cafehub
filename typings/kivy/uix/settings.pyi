"""
This type stub file was generated by pyright.
"""

from kivy.uix.boxlayout import BoxLayout
from kivy.uix.scrollview import ScrollView
from kivy.uix.floatlayout import FloatLayout
from kivy.uix.gridlayout import GridLayout
from kivy.uix.label import Label
from kivy.uix.widget import Widget
from kivy.app import App

'''
Settings
========

.. versionad'''
__all__ = ('Settings', 'SettingsPanel', 'SettingItem', 'SettingString', 'SettingPath', 'SettingBoolean', 'SettingNumeric', 'SettingOptions', 'SettingTitle', 'SettingsWithSidebar', 'SettingsWithSpinner', 'SettingsWithTabbedPanel', 'SettingsWithNoMenu', 'InterfaceWithSidebar', 'ContentPanel', 'MenuSidebar')
class SettingSpacer(Widget):
    ...


class SettingItem(FloatLayout):
    '''Base class for individual settin'''
    title = ...
    desc = ...
    disabled = ...
    section = ...
    key = ...
    value = ...
    panel = ...
    content = ...
    selected_alpha = ...
    __events__ = ...
    def __init__(self, **kwargs) -> None:
        ...
    
    def add_widget(self, *args, **kwargs): # -> None:
        ...
    
    def on_touch_down(self, touch): # -> None:
        ...
    
    def on_touch_up(self, touch): # -> Literal[True]:
        ...
    
    def on_release(self): # -> None:
        ...
    
    def on_value(self, instance, value): # -> None:
        ...
    


class SettingBoolean(SettingItem):
    '''Implementation of a boolean sett'''
    values = ...


class SettingString(SettingItem):
    '''Implementation of a string setti'''
    popup = ...
    textinput = ...
    def on_panel(self, instance, value): # -> None:
        ...
    


class SettingPath(SettingItem):
    '''Implementation of a Path setting'''
    popup = ...
    textinput = ...
    show_hidden = ...
    dirselect = ...
    def on_panel(self, instance, value): # -> None:
        ...
    


class SettingColor(SettingItem):
    '''Implementation of a color settin'''
    popup = ...
    def on_panel(self, instance, value): # -> None:
        ...
    


class SettingNumeric(SettingString):
    '''Implementation of a numeric sett'''
    ...


class SettingOptions(SettingItem):
    '''Implementation of an option list'''
    options = ...
    popup = ...
    def on_panel(self, instance, value): # -> None:
        ...
    


class SettingTitle(Label):
    '''A simple title label, used to or'''
    title = ...
    panel = ...


class SettingsPanel(GridLayout):
    '''This class is used to construct '''
    title = ...
    config = ...
    settings = ...
    def __init__(self, **kwargs) -> None:
        ...
    
    def on_config(self, instance, value): # -> None:
        ...
    
    def get_value(self, section, key): # -> None:
        '''Return the value of the section/'''
        ...
    
    def set_value(self, section, key, value): # -> None:
        ...
    


class InterfaceWithSidebar(BoxLayout):
    '''The default Settings interface c'''
    menu = ...
    content = ...
    __events__ = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def add_panel(self, panel, name, uid): # -> None:
        '''This method is used by Settings '''
        ...
    
    def on_close(self, *args): # -> None:
        ...
    


class InterfaceWithSpinner(BoxLayout):
    '''A settings interface that displa'''
    __events__ = ...
    menu = ...
    content = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def add_panel(self, panel, name, uid): # -> None:
        '''This method is used by Settings '''
        ...
    
    def on_close(self, *args): # -> None:
        ...
    


class ContentPanel(ScrollView):
    '''A class for displaying settings '''
    panels = ...
    container = ...
    current_panel = ...
    current_uid = ...
    def add_panel(self, panel, name, uid): # -> None:
        '''This method is used by Settings '''
        ...
    
    def on_current_uid(self, *args): # -> bool:
        '''The uid of the currently display'''
        ...
    
    def add_widget(self, *args, **kwargs): # -> None:
        ...
    
    def remove_widget(self, *args, **kwargs): # -> None:
        ...
    


class Settings(BoxLayout):
    '''Settings UI. Check module docume'''
    interface = ...
    interface_cls = ...
    __events__ = ...
    def __init__(self, *args, **kargs) -> None:
        ...
    
    def on_touch_down(self, touch): # -> Literal[True] | None:
        ...
    
    def register_type(self, tp, cls): # -> None:
        '''Register a new type that can be '''
        ...
    
    def on_close(self, *args): # -> None:
        ...
    
    def add_interface(self): # -> None:
        '''(Internal) creates an instance o'''
        ...
    
    def on_config_change(self, config, section, key, value): # -> None:
        ...
    
    def add_json_panel(self, title, config, filename=..., data=...): # -> None:
        '''Create and add a new :class:`Set'''
        ...
    
    def create_json_panel(self, title, config, filename=..., data=...): # -> SettingsPanel:
        '''Create new :class:`SettingsPanel'''
        ...
    
    def add_kivy_panel(self): # -> None:
        '''Add a panel for configuring Kivy'''
        ...
    


class SettingsWithSidebar(Settings):
    '''A settings widget that displays '''
    ...


class SettingsWithSpinner(Settings):
    '''A settings widget that displays '''
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class SettingsWithTabbedPanel(Settings):
    '''A settings widget that displays '''
    __events__ = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def on_close(self, *args): # -> None:
        ...
    


class SettingsWithNoMenu(Settings):
    '''A settings widget that displays '''
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class InterfaceWithNoMenu(ContentPanel):
    '''The interface widget used by :cl'''
    def add_widget(self, *args, **kwargs): # -> None:
        ...
    


class InterfaceWithTabbedPanel(FloatLayout):
    '''The content widget used by :clas'''
    tabbedpanel = ...
    close_button = ...
    __events__ = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def add_panel(self, panel, name, uid): # -> None:
        ...
    
    def on_close(self, *args): # -> None:
        ...
    


class MenuSpinner(BoxLayout):
    '''The menu class used by :class:`S'''
    selected_uid = ...
    close_button = ...
    spinner = ...
    panel_names = ...
    spinner_text = ...
    close_button = ...
    def add_item(self, name, uid): # -> None:
        ...
    
    def on_spinner_text(self, *args): # -> None:
        ...
    


class MenuSidebar(FloatLayout):
    '''The menu used by :class:`Interfa'''
    selected_uid = ...
    buttons_layout = ...
    close_button = ...
    def add_item(self, name, uid): # -> None:
        '''This method is used to add new p'''
        ...
    
    def on_selected_uid(self, *args): # -> None:
        '''(internal) unselects any current'''
        ...
    


class SettingSidebarLabel(Label):
    selected = ...
    uid = ...
    menu = ...
    def on_touch_down(self, touch): # -> None:
        ...
    


if __name__ == '__main__':
    class SettingsApp(App):
        demo_json_settings = ...
        def build(self): # -> Settings:
            ...
        
        def build_config(self, config): # -> None:
            ...
        
    
    
