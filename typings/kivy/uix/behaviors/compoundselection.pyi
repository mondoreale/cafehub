"""
This type stub file was generated by pyright.
"""

from os import environ

'''
Compound Selection Behavior
==='''
__all__ = ('CompoundSelectionBehavior', )
if 'KIVY_DOC' not in environ:
    _is_desktop = ...
else:
    _is_desktop = ...
class CompoundSelectionBehavior:
    '''The Selection behavior `mixin <h'''
    selected_nodes = ...
    touch_multiselect = ...
    multiselect = ...
    touch_deselect_last = ...
    keyboard_select = ...
    page_count = ...
    up_count = ...
    right_count = ...
    scroll_count = ...
    nodes_order_reversed = ...
    text_entry_timeout = ...
    _anchor = ...
    _anchor_idx = ...
    _last_selected_node = ...
    _last_node_idx = ...
    _ctrl_down = ...
    _shift_down = ...
    _word_filter = ...
    _last_key_time = ...
    _key_list = ...
    _offset_counts = ...
    def __init__(self, **kwargs) -> None:
        ...
    
    def select_with_touch(self, node, touch=...):
        '''(internal) Processes a touch on '''
        ...
    
    def select_with_key_down(self, keyboard, scancode, codepoint, modifiers, **kwargs):
        '''Processes a key press. This is c'''
        ...
    
    def select_with_key_up(self, keyboard, scancode, **kwargs): # -> bool:
        '''(internal) Processes a key relea'''
        ...
    
    def clear_selection(self): # -> None:
        ''' Deselects all the currently sel'''
        ...
    
    def get_selectable_nodes(self):
        '''(internal) Returns a list of the'''
        ...
    
    def get_index_of_node(self, node, selectable_nodes):
        '''(internal) Returns the index of '''
        ...
    
    def goto_node(self, key, last_node, last_node_idx):
        '''(internal) Used by the controlle'''
        ...
    
    def select_node(self, node): # -> bool:
        ''' Selects a node.

        It is '''
        ...
    
    def deselect_node(self, node): # -> bool:
        ''' Deselects a possibly selected n'''
        ...
    


