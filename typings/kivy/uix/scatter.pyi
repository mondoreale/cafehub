"""
This type stub file was generated by pyright.
"""

from kivy.uix.widget import Widget

'''
Scatter
=======

.. image:: ima'''
__all__ = ('Scatter', 'ScatterPlane')
class Scatter(Widget):
    '''Scatter class. See module docume'''
    __events__ = ...
    auto_bring_to_front = ...
    do_translation_x = ...
    do_translation_y = ...
    do_translation = ...
    translation_touches = ...
    do_rotation = ...
    do_scale = ...
    do_collide_after_children = ...
    scale_min = ...
    scale_max = ...
    transform = ...
    transform_inv = ...
    bbox = ...
    rotation = ...
    scale = ...
    center = ...
    pos = ...
    x = ...
    y = ...
    def get_right(self):
        ...
    
    def set_right(self, value): # -> None:
        ...
    
    right = ...
    def get_top(self):
        ...
    
    def set_top(self, value): # -> None:
        ...
    
    top = ...
    def get_center_x(self):
        ...
    
    def set_center_x(self, value): # -> None:
        ...
    
    center_x = ...
    def get_center_y(self):
        ...
    
    def set_center_y(self, value): # -> None:
        ...
    
    center_y = ...
    def __init__(self, **kwargs) -> None:
        ...
    
    def on_transform(self, instance, value): # -> None:
        ...
    
    def collide_point(self, x, y):
        ...
    
    def to_parent(self, x, y, **k): # -> tuple[Unknown, Unknown]:
        ...
    
    def to_local(self, x, y, **k): # -> tuple[Unknown, Unknown]:
        ...
    
    def apply_transform(self, trans, post_multiply=..., anchor=...): # -> None:
        '''
        Transforms the scatter '''
        ...
    
    def transform_with_touch(self, touch):
        ...
    
    def on_motion(self, etype, me):
        ...
    
    def on_touch_down(self, touch):
        ...
    
    def on_touch_move(self, touch):
        ...
    
    def on_transform_with_touch(self, touch): # -> None:
        '''
        Called when a touch eve'''
        ...
    
    def on_bring_to_front(self, touch): # -> None:
        '''
        Called when a touch eve'''
        ...
    
    def on_touch_up(self, touch): # -> Literal[True] | None:
        ...
    


class ScatterPlane(Scatter):
    '''This is essentially an unbounded'''
    def __init__(self, **kwargs) -> None:
        ...
    
    def collide_point(self, x, y): # -> Literal[True]:
        ...
    


