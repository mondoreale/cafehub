"""
This type stub file was generated by pyright.
"""

from kivy.uix.label import Label
from kivy.uix.widget import Widget
from kivy.app import App

'''
Tree View
=========

.. image::'''
class TreeViewException(Exception):
    '''Exception for errors in the :cla'''
    ...


class TreeViewNode:
    '''TreeViewNode class, used to buil'''
    def __init__(self, **kwargs) -> None:
        ...
    
    is_leaf = ...
    is_open = ...
    is_loaded = ...
    is_selected = ...
    no_selection = ...
    nodes = ...
    parent_node = ...
    level = ...
    color_selected = ...
    odd = ...
    odd_color = ...
    even_color = ...


class TreeViewLabel(Label, TreeViewNode):
    '''Combines a :class:`~kivy.uix.lab'''
    ...


class TreeView(Widget):
    '''TreeView class. See module docum'''
    __events__ = ...
    def __init__(self, **kwargs) -> None:
        ...
    
    def add_node(self, node, parent=...): # -> TreeViewNode:
        '''Add a new node to the tree.

   '''
        ...
    
    def remove_node(self, node): # -> None:
        '''Removes a node from the tree.

 '''
        ...
    
    def on_node_expand(self, node): # -> None:
        ...
    
    def on_node_collapse(self, node): # -> None:
        ...
    
    def select_node(self, node): # -> None:
        '''Select a node in the tree.
     '''
        ...
    
    def deselect_node(self, *args): # -> None:
        '''Deselect any selected node.

   '''
        ...
    
    def toggle_node(self, node): # -> None:
        '''Toggle the state of the node (op'''
        ...
    
    def get_node_at_pos(self, pos): # -> None:
        '''Get the node at the position (x,'''
        ...
    
    def iterate_open_nodes(self, node=...): # -> Generator[Unknown, None, None]:
        '''Generator to iterate over all th'''
        ...
    
    def iterate_all_nodes(self, node=...): # -> Generator[Unknown, None, None]:
        '''Generator to iterate over all no'''
        ...
    
    def on_load_func(self, instance, value): # -> None:
        ...
    
    def on_root_options(self, instance, value): # -> None:
        ...
    
    def on_touch_down(self, touch): # -> Literal[True] | None:
        ...
    
    _root = ...
    _selected_node = ...
    minimum_width = ...
    minimum_height = ...
    minimum_size = ...
    indent_level = ...
    indent_start = ...
    hide_root = ...
    def get_selected_node(self): # -> None:
        ...
    
    selected_node = ...
    def get_root(self): # -> TreeViewNode:
        ...
    
    root = ...
    root_options = ...
    load_func = ...


if __name__ == '__main__':
    class TestApp(App):
        def build(self): # -> TreeView:
            ...
        
    
    
