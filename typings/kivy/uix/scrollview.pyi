"""
This type stub file was generated by pyright.
"""

from kivy.config import Config
from kivy.uix.stencilview import StencilView
from kivy.app import App

'''
ScrollView
==========

.. versi'''
__all__ = ('ScrollView', )
_scroll_timeout = ...
if Config:
    _scroll_timeout = ...
    _scroll_distance = ...
class ScrollView(StencilView):
    '''ScrollView class. See module doc'''
    scroll_distance = ...
    scroll_wheel_distance = ...
    scroll_timeout = ...
    scroll_x = ...
    scroll_y = ...
    do_scroll_x = ...
    do_scroll_y = ...
    do_scroll = ...
    always_overscroll = ...
    vbar = ...
    hbar = ...
    bar_color = ...
    bar_inactive_color = ...
    bar_width = ...
    bar_pos_x = ...
    bar_pos_y = ...
    bar_pos = ...
    bar_margin = ...
    effect_cls = ...
    effect_x = ...
    effect_y = ...
    viewport_size = ...
    scroll_type = ...
    smooth_scroll_end = ...
    _viewport = ...
    _bar_color = ...
    _effect_x_start_width = ...
    _effect_y_start_height = ...
    _update_effect_bounds_ev = ...
    _bind_inactive_bar_color_ev = ...
    def on__viewport(self, instance, value): # -> None:
        ...
    
    __events__ = ...
    def __init__(self, **kwargs) -> None:
        ...
    
    def on_effect_x(self, instance, value): # -> None:
        ...
    
    def on_effect_y(self, instance, value): # -> None:
        ...
    
    def on_effect_cls(self, instance, cls): # -> None:
        ...
    
    def to_local(self, x, y, **k): # -> tuple[Unknown, Unknown]:
        ...
    
    def to_parent(self, x, y, **k): # -> tuple[Unknown, Unknown]:
        ...
    
    def simulate_touch_down(self, touch):
        ...
    
    def on_motion(self, etype, me):
        ...
    
    def on_touch_down(self, touch): # -> Literal[True] | None:
        ...
    
    def on_scroll_start(self, touch, check_children=...):
        ...
    
    def on_touch_move(self, touch): # -> bool | None:
        ...
    
    def on_scroll_move(self, touch):
        ...
    
    def on_touch_up(self, touch): # -> bool | None:
        ...
    
    def on_scroll_stop(self, touch, check_children=...):
        ...
    
    def scroll_to(self, widget, padding=..., animate=...):
        '''Scrolls the viewport to ensure t'''
        ...
    
    def convert_distance_to_scroll(self, dx, dy): # -> tuple[Literal[0], Literal[0]] | tuple[Unknown | Literal[0], Unknown | Literal[1]]:
        '''Convert a distance in pixels to '''
        ...
    
    def update_from_scroll(self, *largs):
        '''Force the reposition of the cont'''
        ...
    
    def add_widget(self, widget, *args, **kwargs): # -> None:
        ...
    
    def remove_widget(self, widget, *args, **kwargs): # -> None:
        ...
    


if __name__ == '__main__':
    class ScrollViewApp(App):
        def build(self): # -> GridLayout:
            ...
        
    
    
