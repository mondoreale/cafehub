"""
This type stub file was generated by pyright.
"""

import logging
import os
from typing import Protocol

class Logger(Protocol):
    @staticmethod
    def debug(s : str) -> None:
        pass
    @staticmethod
    def info(s : str) -> None:
        pass


'''
Logger object
=============

Th'''
__all__ = ('Logger', 'LOG_LEVELS', 'COLORS', 'LoggerHistory', 'file_log_handler')
# Logger = ...
RESET_SEQ = ...
COLOR_SEQ = ...
BOLD_SEQ = ...
previous_stderr = ...
def formatter_message(message, use_color=...):
    ...

COLORS = ...
LOG_LEVELS = ...
class FileHandler(logging.Handler):
    history = ...
    filename = ...
    fd = ...
    log_dir = ...
    encoding = ...
    def purge_logs(self): # -> None:
        '''Purge log is called randomly to '''
        ...
    
    def emit(self, message): # -> None:
        ...
    


class LoggerHistory(logging.Handler):
    history = ...
    def emit(self, message): # -> None:
        ...
    
    @classmethod
    def clear_history(cls): # -> None:
        ...
    
    def flush(self): # -> None:
        ...
    


class ColoredFormatter(logging.Formatter):
    def __init__(self, msg, use_color=...) -> None:
        ...
    
    def format(self, record):
        ...
    


class ConsoleHandler(logging.StreamHandler):
    def filter(self, record):
        ...
    


class LogFile:
    def __init__(self, channel, func) -> None:
        ...
    
    def write(self, s): # -> None:
        ...
    
    def flush(self): # -> None:
        ...
    
    def isatty(self): # -> Literal[False]:
        ...
    


def logger_config_update(section, key, value): # -> None:
    ...

Logger = ...
file_log_handler = ...
if 'KIVY_NO_FILELOG' not in os.environ:
    file_log_handler = ...
if 'KIVY_NO_CONSOLELOG' not in os.environ:
    ...
LoggerHistory = ...
